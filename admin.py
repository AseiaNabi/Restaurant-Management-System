# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'admin.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import calendar
import sqlite3
import datetime as date
from datetime import time
from PyQt5 import QtCore, QtGui, QtWidgets
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg
from matplotlib.figure import Figure
from PyQt5.QtWidgets import QMessageBox


class Matplotlib_Canvas(FigureCanvasQTAgg):
    def __init__(self, parent=None, width=4, height=3, dpi=120):
        fig = Figure(figsize=(width, height), dpi=dpi)
        self.axes = fig.add_subplot(111)
        super(Matplotlib_Canvas, self).__init__(fig)
        fig.tight_layout()

class Ui_OrderDetails(object):
    def __init__(self, window):
        self.window = QtWidgets.QMainWindow()

    def openOrder(self):
        from orderList import Ui_orderList
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_orderList(window="")
        self.ui.setupUi(self.window)
        self.window.show()
        OrderDetails.close()

    def openLogin(self):
        from login import Ui_loginPage
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_loginPage(window="")
        self.ui.setupUi(self.window)
        self.window.show()
        OrderDetails.close()

    def setupUi(self, OrderDetails):
        OrderDetails.setObjectName("OrderDetails")
        OrderDetails.resize(900, 650)
        self.centralwidget = QtWidgets.QWidget(OrderDetails)
        self.centralwidget.setObjectName("centralwidget")
        self.frame_13 = QtWidgets.QFrame(self.centralwidget)
        self.frame_13.setGeometry(QtCore.QRect(0, 0, 170, 700))
        self.frame_13.setStyleSheet("background-color: rgb(51, 55, 53);")
        self.frame_13.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_13.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_13.setObjectName("frame_13")
        self.orderBtn_2 = QtWidgets.QPushButton(self.frame_13)
        self.orderBtn_2.setGeometry(QtCore.QRect(10, 220, 151, 31))
        self.orderBtn_2.setStyleSheet("background-color: rgb(154, 154, 154);\n"
"font: 75 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);\n"
"border-radius: 15px;")
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("Pictures/New/icons8_details_24px.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.orderBtn_2.setIcon(icon)
        self.orderBtn_2.setIconSize(QtCore.QSize(20, 20))
        self.orderBtn_2.setObjectName("orderBtn_2")
        self.dashboardBtn_2 = QtWidgets.QPushButton(self.frame_13)
        self.dashboardBtn_2.setGeometry(QtCore.QRect(10, 180, 151, 31))
        self.dashboardBtn_2.setStyleSheet("background-color: rgb(154, 154, 154);\n"
"font: 75 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);\n"
"\n"
"border-radius: 15px;")
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("Pictures/New/icons8_combo_chart_24px.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.dashboardBtn_2.setIcon(icon1)
        self.dashboardBtn_2.setIconSize(QtCore.QSize(20, 20))
        self.dashboardBtn_2.setObjectName("dashboardBtn_2")
        self.profile2_5 = QtWidgets.QPushButton(self.frame_13)
        self.profile2_5.setGeometry(QtCore.QRect(10, 540, 151, 31))
        self.profile2_5.setStyleSheet("background-color: rgb(154, 154, 154);\n"
"font: 75 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);\n"
"border-radius: 15px;")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("Pictures/New/icons8_user_male_24px.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.profile2_5.setIcon(icon2)
        self.profile2_5.setIconSize(QtCore.QSize(20, 20))
        self.profile2_5.setObjectName("profile2_5")
        self.logoutbtn_3 = QtWidgets.QPushButton(self.frame_13)
        self.logoutbtn_3.setGeometry(QtCore.QRect(10, 580, 151, 31))
        self.logoutbtn_3.setStyleSheet("background-color: rgb(154, 154, 154);\n"
"font: 75 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);\n"
"border-radius: 15px;")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap("Pictures/New/icons8_logout_rounded_left_24px.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.logoutbtn_3.setIcon(icon3)
        self.logoutbtn_3.setIconSize(QtCore.QSize(20, 20))
        self.logoutbtn_3.setObjectName("logoutbtn_3")
        self.label_38 = QtWidgets.QLabel(self.frame_13)
        self.label_38.setGeometry(QtCore.QRect(30, 30, 111, 101))
        self.label_38.setStyleSheet("border-radius: 50px;\n"
"\n"
"")
        self.label_38.setText("")
        self.label_38.setPixmap(QtGui.QPixmap("Pictures/New/circle-cropped.png"))
        self.label_38.setAlignment(QtCore.Qt.AlignCenter)
        self.label_38.setObjectName("label_38")
        self.drinksbtn_4 = QtWidgets.QPushButton(self.frame_13)
        self.drinksbtn_4.setGeometry(QtCore.QRect(10, 260, 151, 31))
        self.drinksbtn_4.setStyleSheet("background-color: rgb(154, 154, 154);\n"
"font: 75 14pt \"Calibri\";\n"
"color: rgb(255, 255, 255);\n"
"border-radius: 15px;")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap("Pictures/New/icons8_add_user_group_man_man_24px.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.drinksbtn_4.setIcon(icon4)
        self.drinksbtn_4.setIconSize(QtCore.QSize(20, 20))
        self.drinksbtn_4.setObjectName("drinksbtn_4")
        self.frame_14 = QtWidgets.QFrame(self.centralwidget)
        self.frame_14.setGeometry(QtCore.QRect(180, 10, 711, 641))
        self.frame_14.setStyleSheet("background-color: rgb(225, 225, 225);")
        self.frame_14.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_14.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_14.setObjectName("frame_14")
        self.label_39 = QtWidgets.QLabel(self.frame_14)
        self.label_39.setGeometry(QtCore.QRect(260, -40, 191, 191))
        self.label_39.setText("")
        self.label_39.setPixmap(QtGui.QPixmap("Pictures/New/Logo.png"))
        self.label_39.setScaledContents(True)
        self.label_39.setObjectName("label_39")
        self.label_6 = QtWidgets.QLabel(self.frame_14)
        self.label_6.setGeometry(QtCore.QRect(280, 80, 151, 31))
        self.label_6.setStyleSheet("font: 75 20pt \"Arial\";\n"
"color: rgb(198, 156, 109);")
        self.label_6.setAlignment(QtCore.Qt.AlignCenter)
        self.label_6.setObjectName("label_6")
        self.user_4 = QtWidgets.QLabel(self.frame_14)
        self.user_4.setGeometry(QtCore.QRect(600, 80, 61, 31))
        self.user_4.setStyleSheet("font: 75 12pt \"Arial\";\n"
"color: rgb(198, 156, 109);")
        self.user_4.setAlignment(QtCore.Qt.AlignCenter)
        self.user_4.setObjectName("user_4")
        self.frame_21 = QtWidgets.QFrame(self.frame_14)
        self.frame_21.setGeometry(QtCore.QRect(10, 110, 691, 521))
        self.frame_21.setStyleSheet("background-color: rgb(51, 55, 53);\n"
"broder-radius: 25px;")
        self.frame_21.setFrameShape(QtWidgets.QFrame.Box)
        self.frame_21.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_21.setLineWidth(3)
        self.frame_21.setObjectName("frame_21")
        self.daily_2 = QtWidgets.QRadioButton(self.frame_21)
        self.daily_2.setGeometry(QtCore.QRect(70, 20, 82, 17))
        self.daily_2.setStyleSheet("font: 10pt \"Arial\";\n"
"color: rgb(255, 255, 255);")
        self.daily_2.setObjectName("daily_2")
        self.weekly_2 = QtWidgets.QRadioButton(self.frame_21)
        self.weekly_2.setGeometry(QtCore.QRect(210, 20, 82, 17))
        self.weekly_2.setStyleSheet("font: 10pt \"Arial\";\n"
"color: rgb(255, 255, 255);")
        self.weekly_2.setObjectName("weekly_2")
        self.monthly_2 = QtWidgets.QRadioButton(self.frame_21)
        self.monthly_2.setGeometry(QtCore.QRect(370, 20, 82, 17))
        self.monthly_2.setStyleSheet("font: 10pt \"Arial\";\n"
"color: rgb(255, 255, 255);")
        self.monthly_2.setObjectName("monthly_2")
        self.yearly_2 = QtWidgets.QRadioButton(self.frame_21)
        self.yearly_2.setGeometry(QtCore.QRect(540, 20, 82, 17))
        self.yearly_2.setStyleSheet("font: 10pt \"Arial\";\n"
"color: rgb(255, 255, 255);")
        self.yearly_2.setObjectName("yearly_2")
        self.verticalLayoutWidget_2 = QtWidgets.QWidget(self.frame_21)
        self.verticalLayoutWidget_2.setGeometry(QtCore.QRect(10, 50, 671, 461))
        self.verticalLayoutWidget_2.setObjectName("verticalLayoutWidget_2")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.verticalLayoutWidget_2)
        self.verticalLayout_2.setContentsMargins(0, 0, 0, 0)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.profile_4 = QtWidgets.QPushButton(self.frame_14)
        self.profile_4.setGeometry(QtCore.QRect(610, 20, 51, 51))
        self.profile_4.setStyleSheet("\n"
"background-color: rgb(255, 255, 255);\n"
"border-radius: 20px;\n"
"\n"
"\n"
"")
        self.profile_4.setText("")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap("Pictures/New/icons8_male_user_60px.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.profile_4.setIcon(icon5)
        self.profile_4.setIconSize(QtCore.QSize(120, 120))
        self.profile_4.setObjectName("profile_4")
        OrderDetails.setCentralWidget(self.centralwidget)

        self.canv = Matplotlib_Canvas(self)
        self.daily_2.pressed.connect(self.update_daily)
        self.weekly_2.pressed.connect(self.update_weekly)
        self.monthly_2.pressed.connect(self.update_monthly)
        self.yearly_2.pressed.connect(self.update_yearly)
        self.update_daily()
        self.orderBtn_2.pressed.connect(self.openOrder)
        self.logoutbtn_3.pressed.connect(self.logout)

        self.retranslateUi(OrderDetails)
        QtCore.QMetaObject.connectSlotsByName(OrderDetails)

    def logout(self):
        msg = QMessageBox()
        msg.setWindowTitle("Info")
        msg.setText("You have been logged out!")
        msg.setIcon(QMessageBox.Information)
        x = msg.exec_()
        self.openLogin()

    def update_daily(self):
        conn = sqlite3.connect("restaurant.db", isolation_level=None)
        cursor = conn.cursor()
        today = date.date.today()
        today_date = str(today)
        weekday = calendar.day_name[today.weekday()]
        query = "SELECT * FROM orders where date = '" + today_date + "'"

        items_list1 = []
        for row in cursor.execute(query):
            items_list1.append(row[2])

        test_list1 = [float(i) for i in items_list1]
        sum_total = sum(test_list1)

        items_list2 = []
        for row in cursor.execute(query):
            items_list2.append(row[3])

        test_list2 = [float(i) for i in items_list2]
        sum_profit = sum(test_list2)

        total = sum_total + sum_profit

        plt.clf()
        try:
            self.verticalLayout_2.removeWidget(self.canv)
            self.canv = None
        except Exception as e:
            print(e)
            pass
        self.canv = Matplotlib_Canvas(self)
        self.verticalLayout_2.addWidget(self.canv)

        self.canv.axes.cla()
        ax = self.canv.axes

        ax.bar(weekday, total, label='Total Sales')
        legend = ax.legend()
        legend.set_draggable(True)
        ax.set_xlabel(today_date, fontsize=10)
        ax.set_ylabel('Total Sales', fontsize=10)
        ax.set_ylim([0, 10000])
        ax.set_title('Sales Today')
        self.canv.draw()

    def update_weekly(self):
        conn = sqlite3.connect("restaurant.db", isolation_level=None)
        cursor = conn.cursor()
        today = date.date.today()
        today_date = str(today)
        # weekday = calendar.day_name[today.weekday()]
        weekday = today.isoweekday()

        week_number = today.isocalendar()[1]
        # The start of the week
        start = today - date.timedelta(days=weekday)
        # build a simple range
        dates = [start + date.timedelta(days=d) for d in range(7)]
        dates_list = [str(d) for d in dates]


        first_day = dates_list[0]
        second_day = dates_list[1]
        third_day = dates_list[2]
        fourth_day = dates_list[3]
        fifth_day = dates_list[4]
        sixth_day = dates_list[5]
        seventh_day = dates_list[6]

        query = "SELECT * FROM orders where date = '" + first_day + "'"
        query1 = "SELECT * FROM orders where date = '" + second_day + "'"
        query2 = "SELECT * FROM orders where date = '" + third_day + "'"
        query3 = "SELECT * FROM orders where date = '" + fourth_day + "'"
        query4 = "SELECT * FROM orders where date = '" + fifth_day + "'"
        query5 = "SELECT * FROM orders where date = '" + sixth_day + "'"
        query6 = "SELECT * FROM orders where date = '" + seventh_day + "'"

        # For Week Day 1
        items_list1 = []
        for row in cursor.execute(query):
            items_list1.append(row[2])

        test_list1 = [float(i) for i in items_list1]
        sum_total = sum(test_list1)

        items_list2 = []
        for row in cursor.execute(query):
            items_list2.append(row[3])

        test_list2 = [float(i) for i in items_list2]
        sum_profit = sum(test_list2)

        total = sum_total + sum_profit

        # For Week Day 2
        items_list2 = []
        for row in cursor.execute(query1):
            items_list2.append(row[2])

        test_list2 = [float(i) for i in items_list2]
        sum_total2 = sum(test_list2)

        items_list3 = []
        for row in cursor.execute(query1):
            items_list3.append(row[3])

        test_list3 = [float(i) for i in items_list3]
        sum_profit2 = sum(test_list3)

        total2 = sum_total2 + sum_profit2

        # For Week Day 3
        items_list3 = []
        for row in cursor.execute(query2):
            items_list3.append(row[2])

        test_list3 = [float(i) for i in items_list3]
        sum_total3 = sum(test_list3)

        items_list4 = []
        for row in cursor.execute(query2):
            items_list4.append(row[3])

        test_list4 = [float(i) for i in items_list4]
        sum_profit3 = sum(test_list4)

        total3 = sum_total3 + sum_profit3

        # For Week Day 4
        items_list4 = []
        for row in cursor.execute(query3):
            items_list4.append(row[2])

        test_list4 = [float(i) for i in items_list4]
        sum_total4 = sum(test_list4)

        items_list5 = []
        for row in cursor.execute(query3):
            items_list5.append(row[3])

        test_list5 = [float(i) for i in items_list5]
        sum_profit4 = sum(test_list5)

        total4 = sum_total4 + sum_profit4

        # For Week Day 5
        items_list5 = []
        for row in cursor.execute(query4):
            items_list5.append(row[2])

        test_list5 = [float(i) for i in items_list5]
        sum_total5 = sum(test_list5)

        items_list6 = []
        for row in cursor.execute(query4):
            items_list6.append(row[3])

        test_list6 = [float(i) for i in items_list6]
        sum_profit5 = sum(test_list6)

        total5 = sum_total5 + sum_profit5

        # For Week Day 6
        items_list6 = []
        for row in cursor.execute(query5):
            items_list6.append(row[2])

        test_list6 = [float(i) for i in items_list6]
        sum_total6 = sum(test_list6)

        items_list7 = []
        for row in cursor.execute(query5):
            items_list7.append(row[3])

        test_list7 = [float(i) for i in items_list7]
        sum_profit6 = sum(test_list7)

        total6 = sum_total6 + sum_profit6

        # For Week Day 7
        items_list7 = []
        for row in cursor.execute(query6):
            items_list7.append(row[2])

        test_list7 = [float(i) for i in items_list7]
        sum_total7 = sum(test_list7)

        items_list8 = []
        for row in cursor.execute(query6):
            items_list8.append(row[3])

        test_list8 = [float(i) for i in items_list8]
        sum_profit7 = sum(test_list8)

        total7 = sum_total7 + sum_profit7

        x = [total, total2, total3, total4, total5, total6, total7]
        list_of_dates = range(0,len(dates_list))

        plt.clf()
        try:
            self.verticalLayout_2.removeWidget(self.canv)
            self.canv = None
        except Exception as e:
            print(e)
            pass
        self.canv = Matplotlib_Canvas(self)
        self.verticalLayout_2.addWidget(self.canv)

        self.canv.axes.cla()
        ax = self.canv.axes

        # get week
        week_days = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]
        days_of_the_week = range(0,len(week_days))

        ax.bar(list_of_dates, x, label='Total Sales', color=('red','blue','green','yellow','black','orange','pink'))
        ax.set_xlabel(week_days, fontsize=10)
        ax.set_ylabel('Total Sales', fontsize=10)
        ax.set_ylim([0, 12000])
        ax.set_xticks(days_of_the_week)
        ax.set_title('Sales this Week')
        self.canv.draw()

    def update_monthly(self):
        conn = sqlite3.connect("restaurant.db", isolation_level=None)
        cursor = conn.cursor()

        today = date.date.today()
        currentMonth = date.date.today().month

        query = "SELECT * FROM orders"

        items_list1 = []
        for row in cursor.execute(query):
            items_list1.append(row[2])

        test_list1 = [float(i) for i in items_list1]
        sum_total = sum(test_list1)

        items_list2 = []
        for row in cursor.execute(query):
            items_list2.append(row[3])

        test_list2 = [float(i) for i in items_list2]
        sum_profit = sum(test_list2)

        total = sum_total + sum_profit

        plt.clf()
        try:
            self.verticalLayout_2.removeWidget(self.canv)
            self.canv = None
        except Exception as e:
            print(e)
            pass
        self.canv = Matplotlib_Canvas(self)
        self.verticalLayout_2.addWidget(self.canv)

        self.canv.axes.cla()
        ax = self.canv.axes

        months = ["Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec"]

        ax.bar(months[currentMonth-1], total, label='Total Sales')
        legend = ax.legend()
        legend.set_draggable(True)
        ax.set_xlabel("Months", fontsize=10)
        ax.set_ylabel('Total Sales', fontsize=10)
        ax.set_ylim([0, 12000])
        # ax.set_xticks(months[currentMonth - 1])
        ax.set_title('Sales this Month')
        self.canv.draw()

    def update_yearly(self):
        conn = sqlite3.connect("restaurant.db", isolation_level=None)
        cursor = conn.cursor()

        today = date.date.today()
        currentMonth = date.date.today().month
        currentYear = date.date.today().year

        query = "SELECT * FROM orders"

        items_list1 = []
        for row in cursor.execute(query):
            items_list1.append(row[2])

        test_list1 = [float(i) for i in items_list1]
        sum_total = sum(test_list1)

        items_list2 = []
        for row in cursor.execute(query):
            items_list2.append(row[3])

        test_list2 = [float(i) for i in items_list2]
        sum_profit = sum(test_list2)

        total = sum_total + sum_profit

        years = [2010, 2015, 2020]

        plt.clf()
        try:
            self.verticalLayout_2.removeWidget(self.canv)
            self.canv = None
        except Exception as e:
            print(e)
            pass
        self.canv = Matplotlib_Canvas(self)
        self.verticalLayout_2.addWidget(self.canv)

        self.canv.axes.cla()
        ax = self.canv.axes

        months = ["Jan", "Feb", "Mar", "Apr", "May", "June", "July", "Aug", "Sep", "Oct", "Nov", "Dec"]

        ax.bar(str(currentYear), total, label='Total Sales')
        legend = ax.legend()
        legend.set_draggable(True)
        ax.set_xlabel("Year", fontsize=10)
        ax.set_ylabel('Total Sales', fontsize=10)
        ax.set_ylim([0, 12000])
        ax.set_title('Sales this Year')
        self.canv.draw()

    def retranslateUi(self, OrderDetails):
        _translate = QtCore.QCoreApplication.translate
        OrderDetails.setWindowTitle(_translate("OrderDetails", "MainWindow"))
        self.orderBtn_2.setText(_translate("OrderDetails", "Order Details"))
        self.dashboardBtn_2.setText(_translate("OrderDetails", "Dashboard"))
        self.profile2_5.setText(_translate("OrderDetails", "Profile"))
        self.logoutbtn_3.setText(_translate("OrderDetails", "Log out"))
        self.drinksbtn_4.setText(_translate("OrderDetails", "Users"))
        self.label_6.setText(_translate("OrderDetails", "<html><head/><body><p><span style=\" font-size:12pt; font-weight:600;\">Visualization</span></p></body></html>"))
        self.user_4.setText(_translate("OrderDetails", "Admin"))
        self.daily_2.setText(_translate("OrderDetails", "Daily"))
        self.weekly_2.setText(_translate("OrderDetails", "Weekly"))
        self.monthly_2.setText(_translate("OrderDetails", "Monthly"))
        self.yearly_2.setText(_translate("OrderDetails", "Yearly"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    OrderDetails = QtWidgets.QMainWindow()
    ui = Ui_OrderDetails(window="")
    ui.setupUi(OrderDetails)
    OrderDetails.show()
    sys.exit(app.exec_())
